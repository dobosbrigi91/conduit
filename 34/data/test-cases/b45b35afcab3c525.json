{
  "uid" : "b45b35afcab3c525",
  "name" : "test_test03",
  "fullName" : "tests.test_test03#test_test03",
  "historyId" : "f7200f8d0a6b49f2cdc3ed62423124d8",
  "time" : {
    "start" : 1627673375448,
    "stop" : 1627673385353,
    "duration" : 9905
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=92.0.4515.107)",
  "statusTrace" : "def test_test03():\n        # -  - #\n        options = Options()\n        options.headless = True\n    \n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)\n        driver.get('http://localhost:1667/#/login')\n    \n        # # # # # # - def - # # # # # #\n    \n        def find(element_xpath):\n            element = driver.find_element_by_xpath(element_xpath)\n            return element\n    \n        def find_and_clear(element_xpath):\n            element = driver.find_element_by_xpath(element_xpath)\n            element.clear()\n            return element\n    \n        def wait_to(element_xpath):\n            wait = WebDriverWait(driver, 20).until(\n                EC.visibility_of_element_located((By.XPATH, element_xpath)))\n            if not wait:\n                return False\n            return True\n    \n        def element_click(element_xpath):\n            button = driver.find_element_by_xpath(element_xpath)\n            button.click()\n            return button\n    \n        try:\n            # # # # # # - tests - # # # # # #\n            # # accept cookie policy\n    \n            element_click('//div[@id=\"cookie-policy-panel\"]//a')  # learn more\n    \n            cookie_policy = driver.switch_to.window(driver.window_handles[-1])\n            time.sleep(5)\n            driver.close()\n            driver.switch_to.window((driver.window_handles[0]))\n    \n            # Accept:\n            element_click('//div//button[contains(@class, \"accept\")]')  # accept cookie policy\n    \n            # # new article\n            # test user: email: testuser3@example.com password: Abcd123$ log in\n    \n            find_and_clear('//*[@id=\"app\"]/div/div/div/div/form/fieldset[1]/input').send_keys('testuser3@example.com')\n            # email\n            find_and_clear('//*[@id=\"app\"]/div/div/div/div/form/fieldset[2]/input').send_keys('Abcd123$')\n            # password\n            element_click('//*[@id=\"app\"]/div/div/div/div/form/button')  # sign in button\n            wait_to('//*[@id=\"app\"]/nav/div/ul/li[4]/a')  # visible user name\n            username = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[4]/a').text\n            assert username == 'testuser3'\n    \n            # Navigate to New article\n            element_click('//nav/div/ul/li[2]/a')  # new article\n            wait_to('//form/fieldset/fieldset[1]/input')  # visible article title field\n    \n            # fields\n            find('//form/fieldset/fieldset[1]/input').send_keys('Hello')  # Title\n            find('//fieldset[2]/input').send_keys('World')  # Whats this article about\n            find('//fieldset[3]/textarea').send_keys('Hello World! Have a nice day')  # Write your article\n            find('//*[@id=\"app\"]/div/div/div/div/form/fieldset/fieldset[4]/div/div/ul/li/input').send_keys('hello')\n            # enter tags\n            wait_to('//button')\n            element_click('//button')\n    \n            # article details\n            wait_to('//*[@id=\"app\"]/div/div[1]/div/h1')  # Title visible\n            assert find('//*[@id=\"app\"]/div/div[1]/div/h1').text == 'Hello'  # Title\n            assert find('//*[@id=\"app\"]/div/div[2]/div[1]/div/div[1]/p').text == 'Hello World! Have a nice day'  # article\n    \n            # # scroll through the page numbers\n    \n            # navigate home page\n            wait_to('//li[@class=\"nav-item\"][1]/a')\n            element_click('//li[@class=\"nav-item\"][1]/a')\n    \n            page_numbers = driver.find_elements_by_xpath('//*[@id=\"app\"]/div/div[2]/div/div[1]/div[2]/div/div/nav/ul/li')\n            for page in page_numbers:\n                x_path = '//*[@id=\"app\"]/div/div[2]/div/div[1]/div[2]/div/div/nav/ul/li[' + page.text + ']/a'\n                find(x_path).click()\n                wait_to('//*[@id=\"app\"]/div/div[2]/div/div[1]/div[1]/ul/li[2]/a')  # visible Global feed\n    \n                # # user articles list:\n            element_click('//div[@class=\"container\"]//ul/li[4]/a')  # user page\n    \n            # title of articles save list and file\n            wait_to('//div[@class=\"profile-page\"]//h4')  # visible profile page\n    \n            list_of_articles = []\n            articles = driver.find_elements_by_xpath('//div[@class=\"profile-page\"]//h1')  # list of titles1\n            for row in articles:\n>               list_of_articles.append(row.text + '\\n')\n\ntests/test_test03.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3c55844640>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#19 0x55b17729ee58 \\\\u003Cunknown>\\\\n#20 0x55b1772b8dfd \\\\u003Cunknown>\\\\n#21 0x7f1bde585609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=92.0.4515.107)\n\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=92.0.4515.107)",
    "statusTrace" : "def test_test03():\n        # -  - #\n        options = Options()\n        options.headless = True\n    \n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)\n        driver.get('http://localhost:1667/#/login')\n    \n        # # # # # # - def - # # # # # #\n    \n        def find(element_xpath):\n            element = driver.find_element_by_xpath(element_xpath)\n            return element\n    \n        def find_and_clear(element_xpath):\n            element = driver.find_element_by_xpath(element_xpath)\n            element.clear()\n            return element\n    \n        def wait_to(element_xpath):\n            wait = WebDriverWait(driver, 20).until(\n                EC.visibility_of_element_located((By.XPATH, element_xpath)))\n            if not wait:\n                return False\n            return True\n    \n        def element_click(element_xpath):\n            button = driver.find_element_by_xpath(element_xpath)\n            button.click()\n            return button\n    \n        try:\n            # # # # # # - tests - # # # # # #\n            # # accept cookie policy\n    \n            element_click('//div[@id=\"cookie-policy-panel\"]//a')  # learn more\n    \n            cookie_policy = driver.switch_to.window(driver.window_handles[-1])\n            time.sleep(5)\n            driver.close()\n            driver.switch_to.window((driver.window_handles[0]))\n    \n            # Accept:\n            element_click('//div//button[contains(@class, \"accept\")]')  # accept cookie policy\n    \n            # # new article\n            # test user: email: testuser3@example.com password: Abcd123$ log in\n    \n            find_and_clear('//*[@id=\"app\"]/div/div/div/div/form/fieldset[1]/input').send_keys('testuser3@example.com')\n            # email\n            find_and_clear('//*[@id=\"app\"]/div/div/div/div/form/fieldset[2]/input').send_keys('Abcd123$')\n            # password\n            element_click('//*[@id=\"app\"]/div/div/div/div/form/button')  # sign in button\n            wait_to('//*[@id=\"app\"]/nav/div/ul/li[4]/a')  # visible user name\n            username = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[4]/a').text\n            assert username == 'testuser3'\n    \n            # Navigate to New article\n            element_click('//nav/div/ul/li[2]/a')  # new article\n            wait_to('//form/fieldset/fieldset[1]/input')  # visible article title field\n    \n            # fields\n            find('//form/fieldset/fieldset[1]/input').send_keys('Hello')  # Title\n            find('//fieldset[2]/input').send_keys('World')  # Whats this article about\n            find('//fieldset[3]/textarea').send_keys('Hello World! Have a nice day')  # Write your article\n            find('//*[@id=\"app\"]/div/div/div/div/form/fieldset/fieldset[4]/div/div/ul/li/input').send_keys('hello')\n            # enter tags\n            wait_to('//button')\n            element_click('//button')\n    \n            # article details\n            wait_to('//*[@id=\"app\"]/div/div[1]/div/h1')  # Title visible\n            assert find('//*[@id=\"app\"]/div/div[1]/div/h1').text == 'Hello'  # Title\n            assert find('//*[@id=\"app\"]/div/div[2]/div[1]/div/div[1]/p').text == 'Hello World! Have a nice day'  # article\n    \n            # # scroll through the page numbers\n    \n            # navigate home page\n            wait_to('//li[@class=\"nav-item\"][1]/a')\n            element_click('//li[@class=\"nav-item\"][1]/a')\n    \n            page_numbers = driver.find_elements_by_xpath('//*[@id=\"app\"]/div/div[2]/div/div[1]/div[2]/div/div/nav/ul/li')\n            for page in page_numbers:\n                x_path = '//*[@id=\"app\"]/div/div[2]/div/div[1]/div[2]/div/div/nav/ul/li[' + page.text + ']/a'\n                find(x_path).click()\n                wait_to('//*[@id=\"app\"]/div/div[2]/div/div[1]/div[1]/ul/li[2]/a')  # visible Global feed\n    \n                # # user articles list:\n            element_click('//div[@class=\"container\"]//ul/li[4]/a')  # user page\n    \n            # title of articles save list and file\n            wait_to('//div[@class=\"profile-page\"]//h4')  # visible profile page\n    \n            list_of_articles = []\n            articles = driver.find_elements_by_xpath('//div[@class=\"profile-page\"]//h1')  # list of titles1\n            for row in articles:\n>               list_of_articles.append(row.text + '\\n')\n\ntests/test_test03.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3c55844640>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#19 0x55b17729ee58 \\\\u003Cunknown>\\\\n#20 0x55b1772b8dfd \\\\u003Cunknown>\\\\n#21 0x7f1bde585609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=92.0.4515.107)\n\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "16ea414121920b87",
      "name" : "log",
      "source" : "16ea414121920b87.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "87d402337ef3bfce",
      "name" : "stderr",
      "source" : "87d402337ef3bfce.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_test03"
  }, {
    "name" : "host",
    "value" : "fv-az77-41"
  }, {
    "name" : "thread",
    "value" : "3625-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_test03"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b45b35afcab3c525.json",
  "parameterValues" : [ ]
}